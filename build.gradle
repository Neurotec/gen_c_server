plugins {
  id "com.zoltu.git-versioning" version "2.0.28"
  id "org.ccrusius.erlang" version "1.3.7"
}

apply plugin: 'c'

//=============================================================================
//
// Why not rebar?
//
// Because, while it works well in its own space, as soon as you get out of it
// it is not flexible enough. The C compilation support, for example, is not
// really there. I need something that works on SmartOS (Solaris), Windows, Mac,
// and Linux. My options are Gradle, CMake, and Shake, and Gradle is the one
// that made all the integrations I needed the least painful. (Bazel
// is currently not an option because of its lack of Windows support.)
//
//=============================================================================

/// ---------------------------------------------------------------------------
///
/// Gradle wrapper configuration
///
/// To upgrade the wrapper, change the version here and run `./gradlew wrapper`
///
/// ---------------------------------------------------------------------------
task wrapper(type: Wrapper) {
  gradleVersion = '3.0'
}

//=============================================================================
//
// Empty tasks to be extended as we go.
//
//=============================================================================
task(install)

/// ---------------------------------------------------------------------------
///
/// Erlang
///
/// ---------------------------------------------------------------------------
ext {
    eiInclude = erlang.eval('io:format("~s", [code:lib_dir(erl_interface, include)]).')
    eiLib     = erlang.eval('io:format("~s", [code:lib_dir(erl_interface, lib)]).')
}

install.dependsOn ebuild

//=============================================================================
//
// Sources
//
//=============================================================================
task install_src(type: Copy) {
  from 'src'
  into "$ebuildAppDir/src"
  include '**/*.erl'
}

install.dependsOn install_src

//=============================================================================
//
// Includes
//
//=============================================================================
task install_include(type: Copy) {
  from 'include'
  into "$ebuildAppDir/include"
  include '**/*.h'
}

install.dependsOn install_include

/// ---------------------------------------------------------------------------
///
/// Testing
///
/// ---------------------------------------------------------------------------
///
/// One thing one may want to be able to do is to easily change the
/// name of the behavior without having to edit the file itself (so
/// the name change can be automated easily in build scripts).
///

task custom_gen_c_server(type: org.ccrusius.erlang.tasks.Compile) {
  setSourceFile 'src/gen_c_server.erl'
  setNewName 'custom_gen_c_server.erl'
  addReplacement '\\bgen_c_server\\b', 'custom_gen_c_server'
  setOutputDir "$rootDir/test/custom_gen_c_server-1.0/ebin"
}

task ct {
  dependsOn install
  ext.destDir = new File("$rootDir/build/test")
  ext.suites = fileTree(dir: "$rootDir/test", include: '**/*_SUITE.erl')
  doLast {
    destDir.mkdirs()
    exec {
      executable 'ct_run'
      args '-pa', "$ebuildAppDir/ebin"
      args '-pa', "$rootDir/test/custom_gen_c_server-1.0/ebin"
      args '-logdir', "$destDir"
      args '-suite'
      args suites
      standardInput System.in
      environment 'ROOT_DIR': "$rootDir"
    }
  }
}

ct.dependsOn custom_gen_c_server

//=============================================================================
//
// Erlang shell
//
//=============================================================================
task shell {
  dependsOn install
  doLast {
    def command = [ 'erl', '-name', 'gradle', '-pa', "$ebuildAppDir/ebin" ]
    def proc = new ProcessBuilder((String[])command)
        .redirectOutput(ProcessBuilder.Redirect.INHERIT)
        .redirectInput(ProcessBuilder.Redirect.INHERIT)
        .redirectError(ProcessBuilder.Redirect.INHERIT)
        .start()
    proc.waitFor()
    if (0 != proc.exitValue()) {
      throw new RuntimeException(
        "erlang shell exited with status: ${proc.exitValue()}")
    }
  }
}

//=============================================================================
//
// C
//
//=============================================================================
model {

  platforms {
    x64 { architecture 'x86_64' }
  }

  repositories {
    libs(PrebuiltLibraries) {
      ei {
        headers.srcDir "$eiInclude"
        binaries.withType(StaticLibraryBinary) { binary ->
          if (binary.targetPlatform.operatingSystem.windows) {
            staticLibraryFile = file("$eiLib\\ei.lib")
          }
          if (binary.targetPlatform.operatingSystem.linux ||
              binary.targetPlatform.operatingSystem.macOsX) {
            staticLibraryFile = file("$eiLib/libei.a")
          }
        }
      }
      erl_interface {
        headers.srcDir "$eiInclude"
        binaries.withType(StaticLibraryBinary) { binary ->
          if (binary.targetPlatform.operatingSystem.windows) {
            staticLibraryFile = file("$eiLib\\erl_interface.lib")
          }
          if (binary.targetPlatform.operatingSystem.linux ||
              binary.targetPlatform.operatingSystem.macOsX) {
            staticLibraryFile = file("$eiLib/liberl_interface.a")
          }
        }
      }
      pthread {
        binaries.withType(SharedLibraryBinary) { binary ->
          def p = binary.targetPlatform
          if (p.operatingSystem.windows) {
            def baseDir = "$rootDir\\pthreads-win32\\Pre-built.2"
            headers.srcDir "$baseDir\\include"
            sharedLibraryFile = file("$baseDir\\dll\\$p.name\\pthreadVC2.dll")
            sharedLibraryLinkFile = file("$baseDir\\lib\\$p.name\\pthreadVC2.lib")
          }
        }
      }
      winsock {
        binaries.withType(StaticLibraryBinary) { binary ->
          def p = binary.targetPlatform
          if (p.operatingSystem.windows) {
            // TODO: Find ws2_32 instead of hardcoding the path
            def baseDir = "C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um"
            staticLibraryFile = file("$baseDir\\$p.name\\ws2_32.lib")
          }
        }
      }
    }
  }

  binaries {
    all {
      cCompiler.define "_REENTRANT"

      lib library: 'erl_interface', linkage: 'static'
      lib library: 'ei', linkage: 'static'

      if (toolChain in VisualCpp) {
        // MSVC defines '_WIN32', but Erlang includes rely on '__WIN32__'
        cCompiler.define "__WIN32__"
        cCompiler.args "/TP"
        linker.args "/SUBSYSTEM:CONSOLE"
        lib library: 'winsock', linkage: 'static'
        lib library: 'pthread', linkage: 'shared'
      }

      if (targetPlatform.operatingSystem.linux) {
        cCompiler.args '-pthread'
        linker.args '-pthread'
      }

      //println 'configuring variant: ' + name + '.' + targetPlatform.name + '.' + buildType.name
    }
  }

  components {
    //=========================================================================
    //
    // gen_c_server native library
    //
    //=========================================================================
    gen_c_server(NativeLibrarySpec) {
      targetPlatform 'x64'
      binaries.withType(SharedLibraryBinarySpec) {
        buildable = false
      }
      sources.c {
        source {
          srcDir  "c_src"
          include "*.c"
        }
        exportedHeaders {
          srcDir  "include"
        }
      }
      binaries.withType(StaticLibraryBinarySpec) { lib ->
        lib.tasks.withType(CreateStaticLibrary) { linkTask ->
          linkTask << {
            copy {
              from lib.staticLibraryFile
              into file("$ebuildAppDir/lib/")
            }
          }
          install.dependsOn lib
        }
      }
    }
    //=========================================================================
    //
    // Test C nodes
    //
    //=========================================================================
    call_counter(NativeExecutableSpec) {
      targetPlatform 'x64'
      sources.c {
        source {
          srcDir  "test/call_counter/c_src"
          include "*.c"
        }
        exportedHeaders {
          srcDir  "include"
        }
      }
      binaries.all {
        lib library: 'gen_c_server', linkage: 'static'
      }
    }
    crashy(NativeExecutableSpec) {
      targetPlatform 'x64'
      sources.c {
        source {
          srcDir  "test/crashy/c_src"
          include "*.c"
        }
        exportedHeaders {
          srcDir  "include"
        }
      }
      binaries.all {
        lib library: 'gen_c_server', linkage: 'static'
      }
    }
    reply_this(NativeExecutableSpec) {
      targetPlatform 'x64'
      sources.c {
        source {
          srcDir  "test/reply_this/c_src"
          include "*.c"
        }
        exportedHeaders {
          srcDir  "include"
        }
      }
      binaries.all {
        lib library: 'gen_c_server', linkage: 'static'
      }
    }
  }
}

//
// For each executable, gradle defines a task called
// install${binary.name}Executable, which will create a suitable
// installation that includes all the library dependencies.
// This installation will have a shell script placed at
// ${project.buildDir}/install/${binary.name}/${binary.name}
// (with a .bat extension on Windows).
//
install.dependsOn 'installCall_counterExecutable'
install.dependsOn 'installCrashyExecutable'
install.dependsOn 'installReply_thisExecutable'
